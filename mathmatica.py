import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Define the TL model function
def TL_model(T, I, E, s, Tm):
    k = 8.617333262145e-5  # Boltzmann constant in eV/K
    return I * np.exp(-E / (k * T)) * np.exp(s * (T - Tm))

# Function to fit and plot the data
def fit_and_plot(data, label):
    T = data['Temperature']
    TL = data['TL Intensity']
    initial_guesses = [
        [1000, 1, 1, 300],  # First initial guess
        [2000, 1, 1, 350],  # Second initial guess
        [500, 1.5, 1.5, 320]  # Third initial guess
    ]

    for initial_guess in initial_guesses:
        try:
            popt, pcov = curve_fit(TL_model, T, TL, p0=initial_guess, maxfev=10000)
            break
        except RuntimeError as e:
            print(f"Error fitting with initial guess {initial_guess} for {label}: {e}")
            continue
    else:
        print(f"All initial guesses failed for {label}.")
        return

    # Get the fit parameters
    I_fit, E_fit, s_fit, Tm_fit = popt
    print(f"{label} Fit parameters with initial guess {initial_guess}:")
    print(f"I: {I_fit}")
    print(f"E: {E_fit}")
    print(f"s: {s_fit}")
    print(f"Tm: {Tm_fit}")

    # Plot the original data and the fitted curve
    plt.scatter(T, TL, label=f'{label} Data')
    plt.plot(T, TL_model(T, *popt), label=f'{label} Fit')

# Data for each Gy level
data10Gy = {
    'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15]),
    'TL Intensity': np.array([773, 727, 828, 1056, 1255, 1711, 2108, 2624, 3263, 4017, 4919, 5898, 6869, 8173, 9619, 11401, 13441, 15575, 18490, 21841, 25003, 29088, 33798, 37320, 41608, 45455, 48769, 50347, 50952, 51161, 49833, 45783, 42782, 38560, 33230, 28048, 22461, 17852, 13894, 11404, 9845, 8727, 7868, 7090, 6598, 5937, 5322, 4827, 5038, 5044, 4890, 5241, 5209, 5417, 5457, 5439, 5304, 5536, 5256, 5462, 5615, 5377, 5401, 5522, 5359, 5382, 5162, 5070, 4961, 4799, 4454, 4385, 4221, 4124, 4069, 4039, 4032, 3787, 3517, 3583, 2915, 2585, 2326, 1905, 1623, 1307, 997, 770, 646, 545, 474, 398, 445, 335, 318])
}

data20Gy = {
    'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15]),
    'TL Intensity': np.array([1193, 1043, 1059, 1213, 1549, 1993, 2567, 3266, 4141, 4936, 5969, 7400, 8934, 10649, 12515, 14872, 17728, 20870, 24713, 28948, 33399, 38684, 43853, 49208, 54183, 59453, 61766, 64770, 64811, 63687, 60777, 56846, 51558, 46701, 40251, 33715, 27019, 21443, 16541, 13574, 11493, 9779, 9286, 8352, 7396, 7014, 6409, 5937, 5826, 5982, 6116, 6389, 6565, 6549, 6497, 6493, 6192, 6127, 6210, 6080, 5986, 5980, 6069, 5762, 5858, 6242, 6365, 6209, 5963, 5923, 6008, 5751, 5635, 5592, 5788, 5943, 5690, 5583, 5184, 4778, 4328, 4011, 3307, 2844, 2211, 1917, 1493, 1267, 952, 813, 725, 563, 500, 425, 376])
}

data30Gy = {
    'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15 ]),  # Replace with your actual data
   'TL Intensity': np.array([1257, 1315, 1266, 1593, 1909, 2663, 3242, 3749, 4754, 6086, 7536, 8846, 10959, 12823, 15742, 18339, 21726, 25658, 30381, 35300, 41068, 47214, 53554, 59214, 64982, 70144, 73039, 75218, 75018, 71913, 68397, 63082, 57118, 50558, 43694, 36317, 29132, 23075, 18130, 15161, 13043, 11588, 10687, 9804, 9279, 8629, 8177, 7985, 7855, 7984, 8163, 8437, 8264, 8536, 8727, 8949, 8708, 8329, 8238, 8145, 8020, 7921, 7890, 8038, 7991, 7888, 8181, 8177, 7942, 7827, 7892, 8092, 7906, 7754, 8059, 7861, 7809, 7574, 6940, 6477, 5800, 5466, 4661, 3876, 3368, 2650, 2081, 1629, 1540, 1175, 929, 801, 702, 671, 623])
}
  
data40Gy = {
    'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15]),  # Replace with your actual data
    'TL Intensity': np.array([1561, 1506, 1518, 1739, 2236, 3135, 3699, 4623, 5876, 7104, 8716, 10259, 12664, 15252, 17973, 21593, 25707, 30024, 35679, 41132, 47800, 54849, 61629, 67850, 74862, 78612, 81243, 81746, 79708, 76874, 70933, 65022, 58328, 51270, 44488, 37581, 30985, 25013, 19965, 16714, 14373, 13344, 12190, 11516, 11074, 10473, 9799, 10284, 10046, 9948, 10184, 10598, 10795, 10988, 11155, 11135, 10942, 10841, 10407, 10283, 10050, 10191, 9996, 9793, 9953, 10068, 10208, 10157, 10269, 10225, 9950, 10242, 10258, 9931, 10125, 9791, 9829, 9286, 8793, 8484, 7796, 6693, 6261, 4984, 4264, 3676, 2875, 2327, 1961, 1648, 1289, 1119, 1056, 937, 859
])     # Replace with your actual data
}

data50Gy = {
    'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15 ]),  # Replace with your actual data
    'TL Intensity': np.array([1735, 1702, 1810, 2136, 2630, 3375, 4191, 5257, 6465, 8204, 9873, 11764, 14573, 17410, 20711, 24662, 29066, 34163, 40110, 46876, 54261, 60820, 68048, 75846, 81789, 86199, 88231, 86813, 84330, 78545, 71021, 64939, 57528, 50408, 43764, 36879, 31126, 25807, 21368, 18255, 15830, 14706, 13492, 13211, 12874, 12229, 11916, 12065, 12165, 12159, 12754, 13093, 13396, 13569, 13661, 13625, 13310, 13101, 13272, 12484, 12467, 12166, 11882, 12093, 11816, 12264, 12324, 12438, 12561, 12451, 12557, 12000, 12489, 12364, 11985, 11931, 11734, 11477, 10678, 10223, 9551, 8407, 7314, 6326, 5424, 4457, 3689, 3066, 2494, 2111, 1749, 1526, 1535, 1304, 1221
])     # Replace with your actual data
}

# Fit and plot for each Gy level
fit_and_plot(data10Gy, "10 Gy")
fit_and_plot(data20Gy, "20 Gy")
fit_and_plot(data30Gy, "30 Gy")
fit_and_plot(data40Gy, "40 Gy")
fit_and_plot(data50Gy, "50 Gy")

# Finalize the plot
plt.xlabel('Temperature (K)')
plt.ylabel('TL Intensity')
plt.title('Thermoluminescence Curves for Different Gy Levels')
plt.legend()
plt.show()



# single one
# import numpy as np
# import matplotlib.pyplot as plt
# from scipy.optimize import curve_fit

# # Manually input the data for each Gy level
# data10Gy = {
#     'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15]),  # Replace with your actual data
#     'TL Intensity': np.array([773, 727, 828, 1056, 1255, 1711, 2108, 2624, 3263, 4017, 4919, 5898, 6869, 8173, 9619, 11401, 13441, 15575, 18490, 21841, 25003, 29088, 33798, 37320, 41608, 45455, 48769, 50347, 50952, 51161, 49833, 45783, 42782, 38560, 33230, 28048, 22461, 17852, 13894, 11404, 9845, 8727, 7868, 7090, 6598, 5937, 5322, 4827, 5038, 5044, 4890, 5241, 5209, 5417, 5457, 5439, 5304, 5536, 5256, 5462, 5615, 5377, 5401, 5522, 5359, 5382, 5162, 5070, 4961, 4799, 4454, 4385, 4221, 4124, 4069, 4039, 4032, 3787, 3517, 3583, 2915, 2585, 2326, 1905, 1623, 1307, 997, 770, 646, 545, 474, 398, 445, 335, 318])
# }

# data20Gy = {
#     'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15]),
#     'TL Intensity': np.array([1193, 1043, 1059, 1213, 1549, 1993, 2567, 3266, 4141, 4936, 5969, 7400, 8934, 10649, 12515, 14872, 17728, 20870, 24713, 28948, 33399, 38684, 43853, 49208, 54183, 59453, 61766, 64770, 64811, 63687, 60777, 56846, 51558, 46701, 40251, 33715, 27019, 21443, 16541, 13574, 11493, 9779, 9286, 8352, 7396, 7014, 6409, 5937, 5826, 5982, 6116, 6389, 6565, 6549, 6497, 6493, 6192, 6127, 6210, 6080, 5986, 5980, 6069, 5762, 5858, 6242, 6365, 6209, 5963, 5923, 6008, 5751, 5635, 5592, 5788, 5943, 5690, 5583, 5184, 4778, 4328, 4011, 3307, 2844, 2211, 1917, 1493, 1267, 952, 813, 725, 563, 500, 425, 376])
# }
# data30Gy = {
#     'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15]),  # Replace with your actual data
#     'TL Intensity': np.array([1563, 1333, 1336, 1523, 1935, 2454, 3106, 4003, 5083, 6132, 7370, 9118, 10787, 12626, 14917, 17661, 20745, 24195, 28435, 32954, 38073, 43934, 49410, 55291, 61698, 68180, 72575, 76098, 77905, 78829, 77240, 73433, 68199, 62052, 54790, 47154, 39691, 32593, 26297, 21027, 16995, 13934, 11587, 10061, 9184, 8718, 7923, 7332, 7181, 7273, 7522, 7935, 8072, 8173, 8214, 8286, 8043, 8063, 7920, 8011, 8117, 8030, 8244, 8237, 8135, 8071, 8228, 8207, 8265, 8071, 8183, 8014, 8034, 8090, 7912, 7883, 7651, 7492, 7077, 6974, 6356, 5797, 5130, 4691, 4027, 3434, 2835, 2312, 1858, 1552, 1174, 1064, 892, 724, 615, 583, 506, 481, 448])
# }

# # Define the TL model function
# def TL_model(T, I, E, s, Tm):
#     k = 8.617333262145e-5  # Boltzmann constant in eV/K
#     return I * np.exp(-E / (k * T)) * np.exp(s * (T - Tm))

# # Fit and plot the data
# def fit_and_plot(data, title):
#     T = data['Temperature']
#     TL = data['TL Intensity']
#     initial_guess = [1000, 1, 1, 300]  # Initial guess for the parameters I, E, s, Tm

#     # Fit the model to the data
#     try:
#         popt, pcov = curve_fit(TL_model, T, TL, p0=initial_guess, maxfev=10000)
#     except RuntimeError as e:
#         print(f"Error fitting {title}: {e}")
#         return

#     # Get the fit parameters
#     I_fit, E_fit, s_fit, Tm_fit = popt
#     print(f"{title} Fit parameters:")
#     print(f"I: {I_fit}")
#     print(f"E: {E_fit}")
#     print(f"s: {s_fit}")
#     print(f"Tm: {Tm_fit}")

#     # Plot the original data and the fitted curve
#     plt.figure()
#     plt.scatter(T, TL, label='Data')
#     plt.plot(T, TL_model(T, *popt), label='Fit', color='red')
#     plt.xlabel('Temperature (K)')
#     plt.ylabel('TL Intensity')
#     plt.title(title)
#     plt.legend()
#     plt.show()

# # Fit and plot for each Gy level
# fit_and_plot(data10Gy, "10 Gy")
# fit_and_plot(data20Gy, "20 Gy")
# fit_and_plot(data30Gy, "30 Gy")




# import numpy as np
# import matplotlib.pyplot as plt
# from scipy.optimize import curve_fit

# # Manually input the data for each Gy level
# data10Gy = {
#    'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15 ]),  # Replace with your actual data

#   'TL Intensity': np.array([773, 727, 828, 1056, 1255, 1711, 2108, 2624, 3263, 4017, 4919, 5898, 6869, 8173, 9619, 11401, 13441, 15575, 18490, 21841, 25003, 29088, 33798, 37320, 41608, 45455, 48769, 50347, 50952, 51161, 49833, 45783, 42782, 38560, 33230, 28048, 22461, 17852, 13894, 11404, 9845, 8727, 7868, 7090, 6598, 5937, 5322, 4827, 5038, 5044, 4890, 5241, 5209, 5417, 5457, 5439, 5304, 5536, 5256, 5462, 5615, 5377, 5401, 5522, 5359, 5382, 5162, 5070, 4961, 4799, 4454, 4385, 4221, 4124, 4069, 4039, 4032, 3787, 3517, 3583, 2915, 2585, 2326, 1905, 1623, 1307, 997, 770, 646, 545, 474, 398, 445, 335, 318
#  ])      # Replace with your actual data
# }

# data20Gy = {
#     'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15 ]),  # Replace with your actual data
#    'TL Intensity': np.array([1193, 1043, 1059, 1213, 1549, 1993, 2567, 3266, 4141, 4936, 5969, 7400, 8934, 10649, 12515, 14872, 17728, 20870, 24713, 28948, 33399, 38684, 43853, 49208, 54183, 59453, 61766, 64770, 64811, 63687, 60777, 56846, 51558, 46701, 40251, 33715, 27019, 21443, 16541, 13574, 11493, 9779, 9286, 8352, 7396, 7014, 6409, 5937, 5826, 5982, 6116, 6389, 6565, 6549, 6497, 6493, 6192, 6127, 6210, 6080, 5986, 5980, 6069, 5762, 5858, 6242, 6365, 6209, 5963, 5923, 6008, 5751, 5635, 5592, 5788, 5943, 5690, 5583, 5184, 4778, 4328, 4011, 3307, 2844, 2211, 1917, 1493, 1267, 952, 813, 725, 563, 500, 425, 376
#  ])      # Replace with your actual data
#  }

# data30Gy = {
#    'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15 ]),  # Replace with your actual data
#    'TL Intensity': np.array([1257, 1315, 1266, 1593, 1909, 2663, 3242, 3749, 4754, 6086, 7536, 8846, 10959, 12823, 15742, 18339, 21726, 25658, 30381, 35300, 41068, 47214, 53554, 59214, 64982, 70144, 73039, 75218, 75018, 71913, 68397, 63082, 57118, 50558, 43694, 36317, 29132, 23075, 18130, 15161, 13043, 11588, 10687, 9804, 9279, 8629, 8177, 7985, 7855, 7984, 8163, 8437, 8264, 8536, 8727, 8949, 8708, 8329, 8238, 8145, 8020, 7921, 7890, 8038, 7991, 7888, 8181, 8177, 7942, 7827, 7892, 8092, 7906, 7754, 8059, 7861, 7809, 7574, 6940, 6477, 5800, 5466, 4661, 3876, 3368, 2650, 2081, 1629, 1540, 1175, 929, 801, 702, 671, 623
#  ])     # Replace with your actual data
#  }

# data40Gy = {
#     'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15]),  # Replace with your actual data
#     'TL Intensity': np.array([1561, 1506, 1518, 1739, 2236, 3135, 3699, 4623, 5876, 7104, 8716, 10259, 12664, 15252, 17973, 21593, 25707, 30024, 35679, 41132, 47800, 54849, 61629, 67850, 74862, 78612, 81243, 81746, 79708, 76874, 70933, 65022, 58328, 51270, 44488, 37581, 30985, 25013, 19965, 16714, 14373, 13344, 12190, 11516, 11074, 10473, 9799, 10284, 10046, 9948, 10184, 10598, 10795, 10988, 11155, 11135, 10942, 10841, 10407, 10283, 10050, 10191, 9996, 9793, 9953, 10068, 10208, 10157, 10269, 10225, 9950, 10242, 10258, 9931, 10125, 9791, 9829, 9286, 8793, 8484, 7796, 6693, 6261, 4984, 4264, 3676, 2875, 2327, 1961, 1648, 1289, 1119, 1056, 937, 859
# ])     # Replace with your actual data
# }

# data50Gy = {
#     'Temperature': np.array([293.15, 295.15, 297.15, 299.15, 301.15, 303.15, 305.15, 307.15, 309.15, 311.15, 313.15, 315.15, 317.15, 319.15, 321.15, 323.15, 325.15, 327.15, 329.15, 331.15, 333.15, 335.15, 337.15, 339.15, 341.15, 343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 357.15, 359.15, 361.15, 363.15, 365.15, 367.15, 369.15, 371.15, 373.15, 375.15, 377.15, 379.15, 381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15, 401.15, 403.15, 405.15, 407.15, 409.15, 411.15, 413.15, 415.15, 417.15, 419.15, 421.15, 423.15, 425.15, 427.15, 429.15, 431.15, 433.15, 435.15, 437.15, 439.15, 441.15, 443.15, 445.15, 447.15, 449.15, 451.15, 453.15, 455.15, 457.15, 459.15, 461.15, 463.15, 465.15, 467.15, 469.15, 471.15, 473.15, 475.15, 477.15, 479.15, 481.15 ]),  # Replace with your actual data
#     'TL Intensity': np.array([1735, 1702, 1810, 2136, 2630, 3375, 4191, 5257, 6465, 8204, 9873, 11764, 14573, 17410, 20711, 24662, 29066, 34163, 40110, 46876, 54261, 60820, 68048, 75846, 81789, 86199, 88231, 86813, 84330, 78545, 71021, 64939, 57528, 50408, 43764, 36879, 31126, 25807, 21368, 18255, 15830, 14706, 13492, 13211, 12874, 12229, 11916, 12065, 12165, 12159, 12754, 13093, 13396, 13569, 13661, 13625, 13310, 13101, 13272, 12484, 12467, 12166, 11882, 12093, 11816, 12264, 12324, 12438, 12561, 12451, 12557, 12000, 12489, 12364, 11985, 11931, 11734, 11477, 10678, 10223, 9551, 8407, 7314, 6326, 5424, 4457, 3689, 3066, 2494, 2111, 1749, 1526, 1535, 1304, 1221
# ])     # Replace with your actual data
# }

# # Define the modified TL model function
# def TL_model_modified(T, Im, E, Tm, b, delta, Zm):
#     k = 8.617e-5  # Boltzmann constant in eV/K
#     T = T + 273.15  # Convert temperature to Kelvin
#     Tm = Tm + 273.15  # Convert Tm to Kelvin
#     exp_factor = np.exp((k * T / E) * (Tm / T - Tm))
#     value = ((b - 1) * (1 - delta) * (Tm / T**2) * exp_factor + Zm)
    
#     # Ensure non-negative values for the power function
#     if np.any(value < 0):
#         return np.full_like(T, np.nan)
    
#     return Im * b * (b - 1) * exp_factor * value**(-b * (b - 1))

# # Fit the model to the data for each Gy level
# def fit_TL_model(data, initial_guess):
#     bounds = (0, [np.inf, np.inf, np.inf, 10, 1, 1])  # Example bounds, adjust as necessary
#     popt, _ = curve_fit(TL_model_modified, data['Temperature'], data['TL Intensity'], p0=initial_guess, bounds=bounds, maxfev=10000)
#     return popt

# # Initial guesses for the parameters (Im, E, Tm, b, delta, Zm)
# initial_guess = [10000, 1, 150, 1.5, 0.1, 1e-3]

# # Fit the model to the 10 Gy data
# popt_10Gy = fit_TL_model(data10Gy, initial_guess)
# print("10 Gy fit parameters:", popt_10Gy)

# # Fit the model to the 20 Gy data
# popt_20Gy = fit_TL_model(data20Gy, initial_guess)
# print("20 Gy fit parameters:", popt_20Gy)

# # Fit the model to the 30 Gy data
# popt_30Gy = fit_TL_model(data30Gy, initial_guess)
# print("30 Gy fit parameters:", popt_30Gy)

# popt_40Gy = fit_TL_model(data40Gy, initial_guess)
# print("40 Gy fit parameters:", popt_40Gy)


# popt_50Gy = fit_TL_model(data50Gy, initial_guess)
# print("50 Gy fit parameters:", popt_50Gy)

# # Plot the data and the fitted curves
# plt.figure(figsize=(10, 6))
# plt.scatter(data10Gy['Temperature'], data10Gy['TL Intensity'], label='10 Gy Data', color='blue')
# plt.plot(data10Gy['Temperature'], TL_model_modified(data10Gy['Temperature'], *popt_10Gy), label='10 Gy Fit', color='blue', linestyle='--')
# plt.scatter(data20Gy['Temperature'], data20Gy['TL Intensity'], label='20 Gy Data', color='green')
# plt.plot(data20Gy['Temperature'], TL_model_modified(data20Gy['Temperature'], *popt_20Gy), label='20 Gy Fit', color='green', linestyle='--')
# plt.scatter(data30Gy['Temperature'], data30Gy['TL Intensity'], label='30 Gy Data', color='red')
# plt.plot(data30Gy['Temperature'], TL_model_modified(data30Gy['Temperature'], *popt_30Gy), label='30 Gy Fit', color='red', linestyle='--')
# plt.scatter(data40Gy['Temperature'], data40Gy['TL Intensity'], label='40 Gy Data', color='yellow')
# plt.plot(data40Gy['Temperature'], TL_model_modified(data40Gy['Temperature'], *popt_40Gy), label='40 Gy Fit', color='yellow', linestyle='--')
# plt.scatter(data50Gy['Temperature'], data50Gy['TL Intensity'], label='50 Gy Data', color='purple')
# plt.plot(data50Gy['Temperature'], TL_model_modified(data50Gy['Temperature'], *popt_50Gy), label='50 Gy Fit', color='purple', linestyle='--')
# plt.xlabel('Temperature (°C)')
# plt.ylabel('TL Intensity')
# plt.legend()
# plt.title('TL Intensity vs Temperature')
# plt.show()


